package view;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import controller.*;
import java.awt.Desktop;
import java.io.*;
import java.sql.*;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.*;
import javax.swing.*;
import model.*;

/**
 * @author Luis Silva
 */
public class FrmRelatorio extends javax.swing.JFrame {

    ConexaoDB conectaAnuncio = new ConexaoDB();
    controller.ControllerCadastrarAnuncio controlCadastrarAnuncio = new ControllerCadastrarAnuncio();
    model.ModelCadastrarAnuncio mCadastrarAnuncio = new ModelCadastrarAnuncio();
    int flag = 0;
    Date dataInicio, dataTermino; 
    float diasC = 1, valInvestidoDia, valInvestidoTotal, anunciOriginal, visualizacoes, visualizacoesClicadas, compartilhamentos; 
    
    public FrmRelatorio() {
        initComponents();
        
        preencherComboCliente();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPesquisarCliente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRelatorio = new javax.swing.JTable();
        btnImprimir = new javax.swing.JButton();
        jComboCliente = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        btnPesquisarCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPesquisarCliente.setText("Pesquisar");
        btnPesquisarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarClienteActionPerformed(evt);
            }
        });

        jTableRelatorio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTableRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Anúncio", "Cliente", "Total investido em R$", "Quant máx de visualizações", "Quant máx de cliques", "Quant máx de compartilhamentos"
            }
        ));
        jScrollPane1.setViewportView(jTableRelatorio);

        btnImprimir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jComboCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um cliente", "TODOS" }));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Cliente:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(441, 441, 441))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPesquisarCliente)
                    .addComponent(jComboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1036, 638));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarClienteActionPerformed
        
        // BOTÃO PESQUISAR CLIENTE
        switch (jComboCliente.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(rootPane, "Selecione um nome do cliente para pesquisar!");
                jComboCliente.requestFocusInWindow();
                break;
            case 1:
                flag = 1 ;
                preencherTabelaRelatorio("SELECT * FROM ANUNCIO ORDER BY DATA_TERMINO");
                break;
            default:
                flag = 2;
                mCadastrarAnuncio.setPesquisa(jComboCliente.getSelectedItem().toString());
                ModelCadastrarAnuncio mCadastrarAnuncio = controlCadastrarAnuncio.buscarCliente(this.mCadastrarAnuncio);
                preencherTabelaRelatorio("SELECT * FROM ANUNCIO WHERE NOME_CLIENTE LIKE '" + mCadastrarAnuncio.getPesquisa() + "'");
                break;
        }
        
    }//GEN-LAST:event_btnPesquisarClienteActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // BOTÃO IMPRIMIR
        switch (flag) {
            case 1:
                
                Document doc1 = new Document(PageSize.A4);
        
                try {

                    PdfWriter.getInstance(doc1, new FileOutputStream("ImpressaoRelatorioAnunciosCadastrado.pdf"));
                    
                    doc1.open();

                    Paragraph titulo = new  Paragraph();

                    titulo.add("Relatório dos anúncios cadastrado no sistema contendo o valor total investido,"
                            + " projeção aproximada da quantidade máxima de visualizações, de cliques e de compartilhamentos");

                    titulo.setAlignment(Element.ALIGN_CENTER);

                    doc1.add(titulo);

                    doc1.add( new Paragraph(" "));

                    doc1.add( new Paragraph(" "));

                    PdfPTable tabela = new PdfPTable(6);

                    PdfPCell cabecalho = new PdfPCell (new Paragraph("Anúncios Cadastrado"));

                    cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cabecalho.setBorder(PdfPCell.NO_BORDER);
                    cabecalho.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    cabecalho.setColspan(6);

                    tabela.addCell(cabecalho);
                    tabela.addCell("Anúncio");
                    tabela.addCell("Cliente");
                    tabela.addCell("Total investido");
                    tabela.addCell("Quantidade máxima de visualizações");
                    tabela.addCell("Quantidade máxima de cliques");
                    tabela.addCell("Quantidade máxima de compartilhamentos");

                    try {

                        conectaAnuncio.conexao();

                        String sql = "SELECT * FROM ANUNCIO ORDER BY DATA_TERMINO";

                        conectaAnuncio.executaSQL(sql);

                        while (conectaAnuncio.rs.next()) {
                            
                            // CALCULO DE ALCANCE DOS ANÚNCIOS
                            dataInicio = conectaAnuncio.rs.getDate("DATA_INICIO");   
                            dataTermino = conectaAnuncio.rs.getDate("DATA_TERMINO");

                            try {

                                diasC = calcularData(dataInicio, dataTermino);

                            } catch (ParseException ex) {

                                Logger.getLogger(FrmRelatorio.class.getName()).log(Level.SEVERE, null, ex);

                            }

                            if (diasC == 0) {

                                diasC = 1;
                            }

                            valInvestidoDia = conectaAnuncio.rs.getFloat("INVESTIMENTO_DIA");
                            valInvestidoTotal = valInvestidoDia * diasC;
                            anunciOriginal = ( ( valInvestidoTotal * 30 ) / 1 );
                            visualizacoes = ( ( anunciOriginal * 4 ) * 40 );
                            visualizacoesClicadas = ( ( visualizacoes * 12 ) / 100 );
                            compartilhamentos = ( ( visualizacoesClicadas * 3 ) / 20 );
                            
                            tabela.addCell(conectaAnuncio.rs.getString("NOME_ANUNCIO"));
                            tabela.addCell(conectaAnuncio.rs.getString("NOME_CLIENTE"));
                            tabela.addCell("R$ " + valInvestidoTotal);
                            tabela.addCell("" + Math.round(visualizacoes));
                            tabela.addCell("" + Math.round(visualizacoesClicadas));
                            tabela.addCell("" + Math.round(compartilhamentos));

                        }

                        conectaAnuncio.desconecta();

                    } catch (SQLException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao carregar anúncios cadastrado! \n ERROR: " + ex);
                        conectaAnuncio.desconecta();
                    }

                    tabela.setHorizontalAlignment(Element.ALIGN_CENTER);

                    doc1.add(tabela);


                } catch (FileNotFoundException | DocumentException ex) {

                    JOptionPane.showMessageDialog(rootPane, "Erro ao gerar PDF \n ERROR: " + ex);

                } finally {

                    JOptionPane.showMessageDialog(rootPane, "Arquivo em PDF gerado com sucesso!");
                    doc1.close();

                }

                try {

                    Desktop.getDesktop().open(new File("ImpressaoRelatorioAnunciosCadastrado.pdf"));

                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(rootPane, "Erro ao abrir PDF \n ERROR: " + ex);

                }
                
                break;
            case 2:
                
                Document doc2 = new Document(PageSize.A4);
        
                try {

                    PdfWriter.getInstance(doc2, new FileOutputStream("ImpressaoRelatorioAnunciosCadastradoCliente_" 
                            + jComboCliente.getSelectedItem().toString() + ".pdf"));
                    
                    doc2.open();

                    Paragraph titulo = new  Paragraph();

                    titulo.add("Relatório dos anúncios cadastrado no sistema referente a " + jComboCliente.getSelectedItem().toString() + ""
                            + " contendo o valor total investido, projeção aproximada da quantidade máxima de visualizações, de cliques e de "
                            + "compartilhamentos");

                    titulo.setAlignment(Element.ALIGN_CENTER);

                    doc2.add(titulo);

                    doc2.add( new Paragraph(" "));

                    doc2.add( new Paragraph(" "));

                    PdfPTable tabela = new PdfPTable(6);

                    PdfPCell cabecalho = new PdfPCell (new Paragraph("Anúncios Cadastrado"));

                    cabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cabecalho.setBorder(PdfPCell.NO_BORDER);
                    cabecalho.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    cabecalho.setColspan(6);

                    tabela.addCell(cabecalho);
                    tabela.addCell("Anúncio");
                    tabela.addCell("Cliente");
                    tabela.addCell("Total investido");
                    tabela.addCell("Quantidade máxima de visualizações");
                    tabela.addCell("Quantidade máxima de cliques");
                    tabela.addCell("Quantidade máxima de compartilhamentos");

                    try {

                        conectaAnuncio.conexao();

                        String sql = "SELECT * FROM ANUNCIO WHERE NOME_CLIENTE = '" + jComboCliente.getSelectedItem().toString() + "' ORDER BY DATA_TERMINO";

                        conectaAnuncio.executaSQL(sql);

                        while (conectaAnuncio.rs.next()) {
                            
                            // CALCULO DE ALCANCE DOS ANÚNCIOS
                            dataInicio = conectaAnuncio.rs.getDate("DATA_INICIO");   
                            dataTermino = conectaAnuncio.rs.getDate("DATA_TERMINO");

                            try {

                                diasC = calcularData(dataInicio, dataTermino);

                            } catch (ParseException ex) {

                                Logger.getLogger(FrmRelatorio.class.getName()).log(Level.SEVERE, null, ex);

                            }

                            if (diasC == 0) {

                                diasC = 1;
                            }

                            valInvestidoDia = conectaAnuncio.rs.getFloat("INVESTIMENTO_DIA");
                            valInvestidoTotal = valInvestidoDia * diasC;
                            anunciOriginal = ( ( valInvestidoTotal * 30 ) / 1 );
                            visualizacoes = ( ( anunciOriginal * 4 ) * 40 );
                            visualizacoesClicadas = ( ( visualizacoes * 12 ) / 100 );
                            compartilhamentos = ( ( visualizacoesClicadas * 3 ) / 20 );
                            
                            tabela.addCell(conectaAnuncio.rs.getString("NOME_ANUNCIO"));
                            tabela.addCell(conectaAnuncio.rs.getString("NOME_CLIENTE"));
                            tabela.addCell("R$ " + valInvestidoTotal);
                            tabela.addCell("" + Math.round(visualizacoes));
                            tabela.addCell("" + Math.round(visualizacoesClicadas));
                            tabela.addCell("" + Math.round(compartilhamentos));

                        }

                        conectaAnuncio.desconecta();

                    } catch (SQLException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao carregar anúncios cadastrado! \n ERROR: " + ex);
                        conectaAnuncio.desconecta();
                    }

                    tabela.setHorizontalAlignment(Element.ALIGN_CENTER);

                    doc2.add(tabela);


                    } catch (FileNotFoundException | DocumentException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao gerar PDF \n ERROR: " + ex);

                    } finally {

                        JOptionPane.showMessageDialog(rootPane, "Arquivo em PDF gerado com sucesso!");
                        doc2.close();

                    }

                    try {

                        Desktop.getDesktop().open(new File("ImpressaoRelatorioAnunciosCadastradoCliente_" 
                            + jComboCliente.getSelectedItem().toString() + ".pdf"));

                    } catch (IOException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao abrir PDF \n ERROR: " + ex);

                    }
                
                break;
            default:
                JOptionPane.showMessageDialog(rootPane, "Ops!! Selecione um nome do cliente para imprimir.");
                break;
        }
        
        flag = 0;
        jComboCliente.setSelectedIndex(0);
        
    }//GEN-LAST:event_btnImprimirActionPerformed

    
        public final void preencherComboCliente() {

            conectaAnuncio.conexao();

            conectaAnuncio.executaSQL("SELECT * FROM ANUNCIO ORDER BY DATA_TERMINO");

            try {

                conectaAnuncio.rs.first();

                do{

                    jComboCliente.addItem(conectaAnuncio.rs.getString("NOME_CLIENTE"));

                }while(conectaAnuncio.rs.next());

            } catch (SQLException ex) {

                JOptionPane.showMessageDialog(rootPane, "Erro ao preencher nome dos cliente \n ERROR: " + ex);

            }

            conectaAnuncio.desconecta();

        }    
    
    
        public void preencherTabelaRelatorio(String SQL) {

            ArrayList dados = new ArrayList();

            String[] Colunas = new String[] {"Anúncio","Cliente","Total investido","Quant máx de visualizações","Quant máx de cliques","Quant máx de compartilhamentos"};

            conectaAnuncio.conexao();

            conectaAnuncio.executaSQL(SQL);

            try {

                conectaAnuncio.rs.first();        

                do {
                    
                    // CALCULO DE ALCANCE DOS ANÚNCIOS
                    dataInicio = conectaAnuncio.rs.getDate("DATA_INICIO");   
                    dataTermino = conectaAnuncio.rs.getDate("DATA_TERMINO");
                    
                    try {
                        
                        diasC = calcularData(dataInicio, dataTermino);
                        
                    } catch (ParseException ex) {
                        
                        Logger.getLogger(FrmRelatorio.class.getName()).log(Level.SEVERE, null, ex);
                        
                    }
                    
                    if (diasC == 0) {
                    
                        diasC = 1;
                    }
     
                    valInvestidoDia = conectaAnuncio.rs.getFloat("INVESTIMENTO_DIA");
                    valInvestidoTotal = valInvestidoDia * diasC;
                    anunciOriginal = ( ( valInvestidoTotal * 30 ) / 1 );
                    visualizacoes = ( ( anunciOriginal * 4 ) * 40 );
                    visualizacoesClicadas = ( ( visualizacoes * 12 ) / 100 );
                    compartilhamentos = ( ( visualizacoesClicadas * 3 ) / 20 );
                    

                    dados.add(new Object[]{conectaAnuncio.rs.getString("NOME_ANUNCIO"), 
                        conectaAnuncio.rs.getString("NOME_Cliente"),
                        "R$ " + valInvestidoTotal, 
                        Math.round(visualizacoes), 
                        Math.round(visualizacoesClicadas),
                        Math.round(compartilhamentos) });

                   }while(conectaAnuncio.rs.next());

            } catch (SQLException e) {

                // JOptionPane.showMessageDialog(rootPane, "Erro ao preencher lista!");
                // JOptionPane.showMessageDialog(rootPane, "Erro ao preencher lista! \n ERRO: " + e);

            }


            ModelTabela mTabelaRelatorio = new ModelTabela(dados, Colunas);

            jTableRelatorio.setModel(mTabelaRelatorio);
            jTableRelatorio.getColumnModel().getColumn(0).setPreferredWidth(181);
            jTableRelatorio.getColumnModel().getColumn(0).setResizable(false);
            jTableRelatorio.getColumnModel().getColumn(1).setPreferredWidth(181);
            jTableRelatorio.getColumnModel().getColumn(1).setResizable(false);
            jTableRelatorio.getColumnModel().getColumn(2).setPreferredWidth(105);
            jTableRelatorio.getColumnModel().getColumn(2).setResizable(false);
            jTableRelatorio.getColumnModel().getColumn(3).setPreferredWidth(175);
            jTableRelatorio.getColumnModel().getColumn(3).setResizable(false);
            jTableRelatorio.getColumnModel().getColumn(4).setPreferredWidth(149);
            jTableRelatorio.getColumnModel().getColumn(4).setResizable(false);
            jTableRelatorio.getColumnModel().getColumn(5).setPreferredWidth(205);
            jTableRelatorio.getColumnModel().getColumn(5).setResizable(false);
            jTableRelatorio.getTableHeader().setReorderingAllowed(false);
            jTableRelatorio.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            jTableRelatorio.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            // conectaAnuncio.desconecta();

        }
        
        /**
         *
         * @param inicio
         * @param fim
         * @return 
         * @throws java.text.ParseException
         */
        public static float calcularData(Date inicio, Date fim) throws ParseException{
 
            Date in = inicio;
            Date fi = fim;
            
            long diffEmMil = Math.abs(fi.getTime() - in.getTime());
            
            int dias = (int) (diffEmMil / (1000 * 60 * 60 * 24));
            
            return dias;

        }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnPesquisarCliente;
    private javax.swing.JComboBox<String> jComboCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRelatorio;
    // End of variables declaration//GEN-END:variables
}
